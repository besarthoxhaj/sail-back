const { curry, compose, not, prop, equals, reduce, assoc, keys, lt, both,
  identity, gt, gte } =
    require('ramda')

const is_pos = lt(0)
const pos_and = both(is_pos)

const test_field = (test) => curry(compose(test, prop))

const exists = test_field(compose(not, not))
const selected = test_field(compose(not, equals('-- select an option --')))


const date_formatted = (d) => {
  if (!d) { return true }

  const is_day = pos_and(gt(32))
  const is_month = pos_and(gt(13))
  const is_year = pos_and(gte(new Date().getFullYear())) //TODO this allows 1,2,3,4.. as a year.

  const tests = [is_day, is_month, is_year]

  const segs = d.split('/') || []
  return segs.length === 3 && segs.every((p, i) => tests[i](p))
}

const date = test_field(date_formatted)

const check_tests = curry((message, tests, values) => {
  return reduce((errors, field) =>
    tests[field](field)(values) || !(field in values)
      ? errors
      : assoc(field, message, errors)
    , {}, keys(tests))
  }
  )
module.exports = { exists, selected, check_tests, date }

const { curry, compose, not, prop, equals, reduce, assoc, keys, lt, both, gt, gte, converge, or } = require('ramda')
const is_pos = lt(0)
const pos_and = both(is_pos)

const test_field = (test) => curry(compose(test, prop))

const exists = test_field(compose(not, not))
const selected = test_field(compose(not, converge(or, [equals('-- select an option --'), equals(undefined)])))

const amount_formatted = amount => {
  if (!amount) { return true }
  return amount && amount.match(/^\d*\.?\d{0,2}$/)
}

const amount = test_field(amount_formatted)

const date_formatted = (year) => (d) => {
  if (!d) { return true }

  const is_day = pos_and(gt(32))
  const is_month = pos_and(gt(13))
  const is_year = pos_and(gte(year))

  const tests = [is_day, is_month, is_year]

  const segs = d.split('/') || []
  return segs.length === 3 && segs.every((p, i) => tests[i](p))
}

const form_date_test = compose(test_field, date_formatted)

const date = form_date_test(new Date().getFullYear())

const date_max = form_date_test(new Date().getFullYear() + 1)

const check_tests = curry((message, tests, values) => {
  return reduce((errors, field) =>
    tests[field](field)(values) || !(field in values)
      ? errors
      : assoc(field, message, errors)
    , {}, keys(tests))
  }
  )

module.exports = { exists, selected, check_tests, date, date_max, amount }
